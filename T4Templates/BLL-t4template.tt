<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

// Change Log v4.0
//
// 
// 
// 06/03/2014 : **Major Name changes to BLL Namespaces (Command Query Responsibility Segregation (CQRS))
// 06/03/2014 : Commands, Queries, ModelViews (was Controller, Presenter, Views)
// 06/03/2014 : Commands, Queries, ModelViews (was Controller, Presenter, Views)
// 04/03/2014 : Removed code >  was not processing "_" table names
// 03/20/2014 : ** Added logic for Create and Update now will do DateTime.Now
// 03/20/2014 : ** Added logic for GUID and ID in Create and Update
// 03/19/2014 : Removed Del by Ids, updated Guid
// 03/06/2014 : Removed Del by Ids, updated Guid
// 03/05/2014 : Pluralized EF Name !
// 03/04/2014 : Removed HTML code into bew file
// 03/01/2014 : Update all areas (crazy rain in socal)




// Initialization
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
     
// Please set the options here 

bool overwrite = true;
string inputFile = @"..\\DAL\\Model.edmx";   //** CHANGE SETTINGS  **
var dalNamespace = "DAL";                    //** CHANGE SETTINGS  **   
// string tablePrefix = "c_";                   //** CHANGE SETTINGS  Not used**

// var modelNames = new string[] {"c_master"};   //** CHANGE SETTINGS  for LIST OF TABLES**
var modelNames = new string[] {};                //** CHANGE SETTINGS  for ALL TABLES in DB**
    
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
    
// Defining namespaces
// string namespaceName = code.VsNamespaceSuggestion();  //** DEFAULT NameSpace **
string namespaceName = "BLL";  //** CHANGE NameSpace to BLL**

string namespaceNameModelViews = namespaceName + ".ModelViews";
string namespaceNameCommands = namespaceName + ".Commands";
string namespaceNameQueries = namespaceName + ".Queries";
string namespaceNameMappers = namespaceName + ".Mappers";
string namespaceNameValidations = namespaceName + ".Validations";
var namspaceNames = new string [] {dalNamespace, namespaceName, namespaceNameModelViews, namespaceNameCommands, namespaceNameQueries, namespaceNameMappers, namespaceNameValidations};

// Checking folders
CheckFolder("ModelViews");
CheckFolder("Commands");
CheckFolder("Queries");
CheckFolder("Mappers");
CheckFolder("Validations");

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().Where(u => modelNames.Count() == 0 || modelNames.Contains(u.Name)).OrderBy(e => e.Name))
{
    // string realEntityName = entity.Name.Replace(tablePrefix, string.Empty);  //<-- remove leading table name
        
        // Get pluralized name
        EntitySetBase entity1 = container.BaseEntitySets.FirstOrDefault(set => set.ElementType == entity);
        string pluralizedName = entity1.Name;

    string realEntityName = entity.Name;

    // REMOVED - was not processing "_" table names
    //int index = 0;
    //while(index <= realEntityName.Length){
        //int p = realEntityName.IndexOf("_", index);
        //if( p!=-1 ){
            //realEntityName = realEntityName.Substring(0, p) + realEntityName.Substring(p+1,1).ToUpper() + realEntityName.Substring(p+2);
            //index = p++;
        //}
        //else
            //break;
    //}


    realEntityName = FixName(realEntityName);

// Creating ValidationView -----------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameModelViews, code);
#>

public class ValidationView {

    public string ValidationField { get; set; }
    public string ValidationMessage { get; set; }

}

public class JsonMessageView
    {
        private bool _success;
        public bool success {
            get
            {
                return _success;
            }
            set { _success = value; }
        }

        private string _message;
        public string message {
            get
            {
                return string.IsNullOrEmpty(_message) ? "base error" : _message;
            }
            set { _message = value; }
        }

        public List<ValidationView> validation { get; set; }
    }

<# 
    EndNamespace(namespaceNameModelViews);
    WriteFile("ModelViews", "ValidationView.cs", overwrite);


// Creating Views-----------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameModelViews, code);
#>

public class <#= realEntityName #> {

    public class Extend : DbModel
    {
        public string ActiveYesNo { get; set; }
    }

    public class DbModel
    {
<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
    #>
        public <#= code.Escape(edmProperty.TypeUsage) #> <#=realPropertyName#> { get; set; }
<# } #>
    }

}

<# 
    EndNamespace(namespaceNameModelViews);
    WriteFile("ModelViews", realEntityName + "ModelView.cs", overwrite);

// Creating Queries------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameQueries, code);
#>

public static class <#= realEntityName #> {

    public static List<ModelViews.<#=realEntityName#>.Extend> GetAll()
    {
        using (var ctx = new <#=code.Escape(container)#>())
        {
            var data = ctx.<#=pluralizedName#>.OrderBy(h => h.id).ToList();
            return data.Select(Mappers.<#=realEntityName#>.Basic).ToList();
        }
    }

    public static List<ModelViews.<#=realEntityName#>.Extend> GetActive()
    {
        using (var ctx = new <#=code.Escape(container)#>())
        {
            var data = ctx.<#=pluralizedName#>.Where(h =>h.active).OrderBy(h => h.id).ToList();
            return data.Select(Mappers.<#=realEntityName#>.Basic).ToList();
        }
    }

    public static ModelViews.<#=realEntityName#>.Extend GetById(int id)
    {
        using (var ctx = new <#=code.Escape(container)#>())
        {
            var data = ctx.<#=pluralizedName#>.FirstOrDefault(h => h.id == id);
            return data != null ? Mappers.<#=realEntityName#>.Basic(data) : null;
        }
    }

    public static ModelViews.<#=realEntityName#>.Extend GetByGuid(Guid guid)
    {
        using (var ctx = new <#=code.Escape(container)#>())
        {
            var data = ctx.<#=pluralizedName#>.FirstOrDefault(h => h.guid == guid);
            return data != null ? Mappers.<#=realEntityName#>.Basic(data) : null;
        }
    }

}
<# 
    EndNamespace(namespaceNameQueries);
    WriteFile("Queries", realEntityName + "Query.cs", overwrite);

// Creating Mappers------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameMappers, code);
#>

public static class <#= realEntityName #> {

    public static ModelViews.<#= realEntityName #>.Extend Basic(DAL.<#=entity.Name#> data)
    {
        var view = new ModelViews.<#= realEntityName #>.Extend();

<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
#>
        view.<#= realPropertyName #> = data.<#= edmProperty #>;
<# } #>

        view.ActiveYesNo = (data.active) ? "Yes" : "No";

        return view;
    }
}
<# 
    EndNamespace(namespaceNameMappers);
    WriteFile("Mappers", realEntityName + "Mapper.cs", overwrite);

// Creating Commands------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameCommands, code);
#>

public class <#= realEntityName #> {

        public static ModelViews.<#= realEntityName #>.Extend Create(ModelViews.<#= realEntityName #>.Extend view) {

            var data = new DAL.<#=entity.Name#>();

            try
            {
                using (var ctx = new <#=code.Escape(container)#>())
                {
                    if (view.Id == 0)
                    {

<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
        if( realPropertyName.ToLower() != "id")  {
                if(code.Escape(edmProperty.TypeUsage) == "System.DateTime") {#>
                    data.<#= edmProperty #> = DateTime.Now;
                <#}else{
#>
                    data.<#= edmProperty #> = view.<#= realPropertyName #>;
<#                  }
                }
     }
#>
                    ctx.<#=pluralizedName#>.AddObject(data);
                    ctx.SaveChanges();
                    
                    // Tracker.Track(TrackingState.Created, "Created <#=entity.Name#>", "<#=entity.Name#>", data.id);
                }
            }
        }
        catch (Exception ex)
        {
            data = new DAL.<#=entity.Name#>();
            // ErrorHandler.InsertErrorInfo(ex, ErrorState.Significant, "<#= realEntityName #>Controller.Create");
        }

        return Mappers.<#= realEntityName #>.Basic(data);
    }

        public static ModelViews.<#= realEntityName #>.Extend Update(ModelViews.<#= realEntityName #>.Extend view) {

            var data = new DAL.<#=entity.Name#>();

            try
            {
                using (var ctx = new <#=code.Escape(container)#>())
                {
                    data = ctx.<#=pluralizedName#>.FirstOrDefault(c => c.guid == view.Guid);

                    if (data != null)
                    {

<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);

        if( (realPropertyName.ToLower() != "id") && (realPropertyName.ToLower() != "guid") && (realPropertyName.ToLower() != "created")) {
                 if(code.Escape(edmProperty.TypeUsage) == "System.DateTime") {#>
                    data.<#= edmProperty #> = DateTime.Now;
                <#}else{
#>
                    data.<#=edmProperty #> = view.<#=realPropertyName #>;
<# 
                    }
            }
    } 
#>

                    ctx.SaveChanges();
                    
                    // Tracker.Track(TrackingState.Updated, "Updated <#=entity.Name#>", "<#=entity.Name#>", data.guid);
                }
            }
        }
        catch (Exception ex)
        {
            data = new DAL.<#=entity.Name#>();
            // ErrorHandler.InsertErrorInfo(ex, ErrorState.Significant, "<#= realEntityName #>Controller.Update");
        }

        return Mappers.<#= realEntityName #>.Basic(data);
    }

        public static bool Delete(Guid guid)
        {
            try
            {
                using (var ctx = new <#=code.Escape(container)#>())
                {
                    var data = ctx.<#=pluralizedName#>.FirstOrDefault(c => c.guid == guid);
                    if (data != null)
                    {
                        ctx.<#=pluralizedName#>.DeleteObject(data);
                        ctx.SaveChanges();
                        // Tracker.Track(TrackingState.Deleted, "Delete <#=entity.Name#>s", "<#=entity.Name#>", data.guid);
                    }
                }
            }
            catch (Exception ex)
            {
                // ErrorHandler.InsertErrorInfo(ex, ErrorState.Significant, "<#= realEntityName #>Controller.Delete by Guid");
                return false;
            }

            return true;
        }

}
<# 
    EndNamespace(namespaceNameCommands);
    WriteFile("Commands", realEntityName + "Command.cs", overwrite);
    // Creating Validations------------------------------------------------------------------------
    WriteHeader(namspaceNames);
    BeginNamespace(namespaceNameValidations, code);
#>

public class <#= realEntityName #> {

        public static List<ValidationView> Validate(ModelViews.<#= realEntityName #>.Extend view) {

            var error = new List<ValidationView>();

<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => !p.Nullable && p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
#>
                    if (view.<#=realPropertyName#> == null || string.IsNullOrEmpty(view.<#=realPropertyName#>.ToString())){
                        var validationview = new ValidationView();
                        validationview.ValidationField = "<#= edmProperty #>";
                        validationview.ValidationMessage = "<#=realPropertyName#> is required";
                        error.Add(validationview);
                    }

<# } #>
        return error;
    }
}
<# 
    EndNamespace(namespaceNameCommands);
    WriteFile("Validations", realEntityName + "Validator.cs", overwrite);
}
#>

<#+

string FixName(string name){
    return name.Substring(0,1).ToUpper() + name.Substring(1);
}

void CheckFolder(string folder){
    string directory = Path.GetDirectoryName(Host.TemplateFile);
    directory = Path.Combine(directory, folder);
    if(!System.IO.Directory.Exists(directory))
        System.IO.Directory.CreateDirectory(directory);
}

void WriteFile(string folder, string file, bool overwrite){
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory,folder, file);

    if(file.ToLower() == "debug.txt" || !File.Exists(outputFilePath) || overwrite)
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

void WriteHeader(params string[] extraUsings)
{
#>
//------------------------------------------------------------------------------
// <auto-generated> This code was generated from a T4 template on:
//      <#= DateTime.Now.ToString() #> 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>

<#+
}
   
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#> {
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}





#>
