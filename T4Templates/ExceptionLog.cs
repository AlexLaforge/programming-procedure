//------------------------------------------------------------------------------
// <auto-generated>	This code was generated from a T4 template on:
//		3/21/2014 8:15:06 AM 
// </auto-generated>
//------------------------------------------------------------------------------

namespace BLL.Commands
{
    using System;
    using System.ComponentModel;
    using System.Linq;

    using DAL;

    public partial class ExceptionLog
    {

        public static class ErrorState
        {
            public const string Critical = "Critical";
            public const string Significant = "Significant";
        }



        public static void CreateExceptionLog(Exception ex, string errorState, string memo)
        {
            var view = new ModelViews.ExceptionLog.Extend();

            view.ExceptionStack = ex.StackTrace;
            view.ErrorState = errorState;
            view.CustomInfo = memo;
            view.ExceptionMessage = ex.Message;
            view.ExceptionSource = ex.Source;
            view.ExceptionTargetsite = ex.TargetSite.ToString();
            view.ExceptionData = ex.Data.ToString();

            Create(view);

        }

        private static ModelViews.ExceptionLog.Extend Create(ModelViews.ExceptionLog.Extend view)
        {

            var data = new DAL.exceptionLog();

            try
            {
                using (var ctx = new TraditionEntities())
                {
                    if (view.Id == 0)
                    {

                        data.exceptionStack = view.ExceptionStack;
                        data.errorState = view.ErrorState;
                        data.customInfo = view.CustomInfo;
                        data.created = DateTime.Now;
                        data.exceptionMessage = view.ExceptionMessage;
                        data.exceptionSource = view.ExceptionSource;
                        data.exceptionTargetsite = view.ExceptionTargetsite;
                        data.exceptionData = view.ExceptionData;
                        ctx.exceptionLogs.AddObject(data);
                        ctx.SaveChanges();

                    }
                }
            }
            catch (Exception ex)
            {
                //data = new DAL.exceptionLog();
                //ExceptionLog.CreateExceptionLog(ex, ExceptionLog.ErrorState.Significant, "ExceptionLogController.Create");
            }

            return Mappers.ExceptionLog.Basic(data);
        }

    }
}
