<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

// Website TT 
// Change Log v1.2
//
//
// 03/13/2014 : Replaced JS code /app.js has core code now
// 03/13/2014 : Bug fix required fields, submit button
// 03/09/2014 : Cleaned JS Delete (created app.js) to handle
// 03/06/2014 : Added MVC Model header
// 03/04/2014 : Separated all HTML page code from BLL.TT




// Initialization
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
     
// Please set the options here 

bool overwrite = true;
string inputFile = @"..\\DAL\\Model.edmx";   //** CHANGE SETTINGS  **
var dalNamespace = "DAL";                    //** CHANGE SETTINGS  **   
// string tablePrefix = "c_";                   //** CHANGE SETTINGS  Not used**

// var modelNames = new string[] {"c_master"};   //** CHANGE SETTINGS  for LIST OF TABLES**
var modelNames = new string[] {};                //** CHANGE SETTINGS  for ALL TABLES in DB**
    
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Checking folders
CheckFolder("HTML");


WriteHtmlMenuHeader();
  foreach (EntityType entity in ItemCollection.GetItems<EntityType>().Where(u => modelNames.Count() == 0 || modelNames.Contains(u.Name)).OrderBy(e => e.Name))
    {
string realEntityName = entity.Name;
int index = 0;
while(index <= realEntityName.Length){
int p = realEntityName.IndexOf("_", index);
if( p!=-1 ){
realEntityName = realEntityName.Substring(0, p) + realEntityName.Substring(p+1,1).ToUpper() + realEntityName.Substring(p+2);
index = p++;
}
else
break;
}
realEntityName = FixName(realEntityName);

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
// WriteHtmlMenuHeader(realEntityName);
#>
<li><a href="/<#=realEntityName#>"><#=realEntityName#></a></li>
<# 

    }
WriteHtmlMenuFooter();
WriteFile("HTML", "_nav.htm", overwrite);





foreach (EntityType entity in ItemCollection.GetItems<EntityType>().Where(u => modelNames.Count() == 0 || modelNames.Contains(u.Name)).OrderBy(e => e.Name))
{
    // string realEntityName = entity.Name.Replace(tablePrefix, string.Empty);  //<-- remove leading table name
    string realEntityName = entity.Name;
    int index = 0;
    while(index <= realEntityName.Length){
        int p = realEntityName.IndexOf("_", index);
        if( p!=-1 ){
            realEntityName = realEntityName.Substring(0, p) + realEntityName.Substring(p+1,1).ToUpper() + realEntityName.Substring(p+2);
            index = p++;
        }
        else
            break;
    }
    realEntityName = FixName(realEntityName);

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------


// Creating HTML List ------------------------------------------------------------------------
    WriteHtmlFormListHeader(realEntityName);
#>

<a href="/<#=realEntityName#>/Edit" class="btn btn-success">New <#=realEntityName#></a>


<table class="table table-striped">
    <thead>
        <tr>
            <th>trash</th>
            <th>link</th>
<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
        string realPropertyField = FixName(realPropertyName).ToLower();
#>
            <th><#=realPropertyName#></th>  
<# } #>
            <th>active</th>
        </tr>
    </thead>
    <tbody>
                @foreach (var item in Model)
        {
            <tr data-id="@item.Guid">
                <td><a href="#" class="tr-delete"><i class="fa fa-trash-o"></i></a></td>
                <td><a href="/<#=realEntityName#>/@item.Guid">Link to detail</a></td>    

<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
        string realPropertyField = FixName(realPropertyName).ToLower();
#>
                <td>@item.<#=realPropertyName#></td>  
<# } #>
                <td>
                    <i class="fa @(item.Active ? "fa-check" : "")">
                        <span style="display: none">@item.ActiveYesNo</span>
                    </i>
                </td>
            </tr>
        }
    </tbody>
</table>


<# 
    WriteHtmlFormListFooter();
    WriteFile("HTML", realEntityName + "List.htm", overwrite);
// ------------------------------------------------------------------------
// ------------------------------------------------------------------------


 // Creating HTML Detail------------------------------------------------------------------------
    WriteHtmlFormHeader(realEntityName);
#>
<#foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
        string realPropertyName = code.Escape(edmProperty);
        realPropertyName = FixName(realPropertyName);
        string realPropertyField = FixName(realPropertyName).ToLower();
#>
        <div class="form-group">
            <label for="<#=realPropertyField#>"><#=realPropertyName#></label>
            <input type="text" name="<#=realPropertyField#>" id="<#=realPropertyField#>" value="@Model.<#=realPropertyName#>" class="form-control required" />
        </div>

<# } #>

<div class="form-group">
         <label>Active</label>
         <input type="checkbox" class="form-control" id="active" name="active" checked="@Model.Active"/>
     </div>
 
     <div class="form-group">
         <button id="btn-submit" type="submit" class="btn btn-primary">Submit</button>
         <input type="hidden" id="hdGuid" name="hdGuid" value="@Model.Guid" />
     </div>
<# 
    WriteHtmlFormFooter();
   WriteFile("HTML", realEntityName + "Detail.htm", overwrite);  
}
#>



<#+

string FixName(string name){
    return name.Substring(0,1).ToUpper() + name.Substring(1);
}

void CheckFolder(string folder){
    string directory = Path.GetDirectoryName(Host.TemplateFile);
    directory = Path.Combine(directory, folder);
    if(!System.IO.Directory.Exists(directory))
        System.IO.Directory.CreateDirectory(directory);
}

void WriteFile(string folder, string file, bool overwrite){
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory,folder, file);

    if(file.ToLower() == "debug.txt" || !File.Exists(outputFilePath) || overwrite)
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}



void WriteHtmlFormHeader(string realEntityName)
{
#>
@model BLL.Views.<#=realEntityName#>.Extend

@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="/Scripts/app.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        
        var formMain = $("#form-main");
        $(formMain).validate();

        $(formMain).submit(function () {
            // Validation Failed
            if (!$(formMain).valid()) { return false; }

            // Process Form
            var formData = $(this).serialize();
            var formButton = $("#btn-submit");

            UpdateRecord(formData, formButton, '<#=realEntityName#>');

            return false;
        });


    });
</script>

<h1> <#=realEntityName#> </h1>

<form action="/" method="POST" id="form-main">

<#+
}

void WriteHtmlFormFooter()
{
#>
</form>
<#+
}


void WriteHtmlFormListHeader(string realEntityName)
{
#>
@model List<BLL.Views.<#=realEntityName#>.Extend>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">

    $(document).ready(function() {
        $('.table').dataTable({
            "aaSorting": [[1, "asc"]],
            "iDisplayLength": 200,
        });

        // -------------------------------------------
        $(".tr-delete").on("click", function() {
            DeleteRecordRemoveTr(this, '<#=realEntityName#>');
        });

        // -------------------------------------------
        

    });
</script>


<h1> @Model.Count <#=realEntityName#> </h1>

<form action="/" method="POST" id="form-main">

<#+
}

void WriteHtmlFormListFooter()
{
#>

<#+
}


void WriteHtmlMenuHeader()
{
#>
<ul class="nav nav-pills">
<#+
}

void WriteHtmlMenuFooter()
{
#>
</ul>
<#+
}

#>
