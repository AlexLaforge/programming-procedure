<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

// MVC Controller TT 
// Change Log v1.0
//
//
// 06/28/2014 : Update CQRS
// 03/19/2014 : Added Update to replace Create/Update
// 03/06/2014 : Create - build MVC Controller for Views
// 03/06/2014 : Create - build MVC Controller for Views




// Initialization
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
     
// Please set the options here 

bool overwrite = true;
string inputFile = @"..\\DAL\\Model.edmx";   //** CHANGE SETTINGS  **
var dalNamespace = "DAL";                    //** CHANGE SETTINGS  **   
// string tablePrefix = "c_";                   //** CHANGE SETTINGS  Not used**

// var modelNames = new string[] {"c_master"};   //** CHANGE SETTINGS  for LIST OF TABLES**
var modelNames = new string[] {};                //** CHANGE SETTINGS  for ALL TABLES in DB**
    
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Checking folders
CheckFolder("CNTRL");


  foreach (EntityType entity in ItemCollection.GetItems<EntityType>().Where(u => modelNames.Count() == 0 || modelNames.Contains(u.Name)).OrderBy(e => e.Name))
    {
string realEntityName = entity.Name;
int index = 0;
while(index <= realEntityName.Length){
int p = realEntityName.IndexOf("_", index);
if( p!=-1 ){
realEntityName = realEntityName.Substring(0, p) + realEntityName.Substring(p+1,1).ToUpper() + realEntityName.Substring(p+2);
index = p++;
}
else
break;
}
realEntityName = FixName(realEntityName);
// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
WriteCNTRLHeader();
#>
    public class <#=realEntityName#>Controller : Controller
    {

        public ActionResult Index()
        {
            var data = BLL.Queries.<#=realEntityName#>.GetAll();
            return View(data);
        }

        public ActionResult Details(Guid guid)
        {
            var data = BLL.Queries.<#=realEntityName#>.GetByGuid(guid);
            return View(data);
        }

        public ActionResult Create()
        {
            var data = new BLL.ModelViews.<#=realEntityName#>.Extend();
            return View("Details", data);
        }

        [HttpPost]
        public string Post(BLL.ModelViews.<#=realEntityName#>.Extend collection)
        {
            var results = new JsonMessageView();

            var error = BLL.Validations.<#=realEntityName#>.Validate(collection);
            if (error.Count > 0)
            {
                results.success = false;
                results.message = "Validation Failed";
                results.validation = error;
                return JsonConvert.SerializeObject(results);
            }


            if (collection.Guid == Guid.Empty)
            {
                // Create record
                var data = BLL.Commands.<#=realEntityName#>.Create(collection);
                if (data.Guid  != Guid.Empty)
                {
                    results.success = true;
                    results.message = "Success creating " + collection.Title;
                }
                else
                {
                    results.success = false;
                    results.message = "There was an error creating " + collection.Title;
                }

            }
            else
            {
                // Update record
                var data = BLL.Commands.<#=realEntityName#>.Update(collection);
                if (data != null)
                {
                    results.success = true;
                    results.message = "Success updating " + collection.Title;
                }
                else
                {
                    results.success = false;
                    results.message = "There was an error updating " + collection.Title;
                }
            }


            return JsonConvert.SerializeObject(results);
        }

         //[HttpPost]
        //public string Create(BLL.ModelViews.Client.Extend collection)
        //{
            //var results = new JsonMessageView();
            //
            //return JsonConvert.SerializeObject(results);
        //}
        //
        //[HttpPost]
        //public string Edit(int id, BLL.ModelViews.Client.Extend collection)
        //{
            //var results = new JsonMessageView();
            //
            //return JsonConvert.SerializeObject(results);
        //}

        [HttpPost]
        public string Delete(Guid guid)
        {
            var results = new BLL.ModelViews.JsonMessageView();

            var isDeleted = BLL.Commands.Client.Delete(guid);
            if (isDeleted)
            {
                results.success = true;
                results.message = "'Delete";
            }

            return JsonConvert.SerializeObject(results);
        }
    }
<# 
WriteCNTRLFooter();
WriteFile("CNTRL", realEntityName + "Controller.cs", overwrite);
}
#>


<#+

string FixName(string name){
    return name.Substring(0,1).ToUpper() + name.Substring(1);
}

void CheckFolder(string folder){
    string directory = Path.GetDirectoryName(Host.TemplateFile);
    directory = Path.Combine(directory, folder);
    if(!System.IO.Directory.Exists(directory))
        System.IO.Directory.CreateDirectory(directory);
}

void WriteFile(string folder, string file, bool overwrite){
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory,folder, file);

    if(file.ToLower() == "debug.txt" || !File.Exists(outputFilePath) || overwrite)
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}


void WriteCNTRLHeader()
{ #>
using System;
using System.Web.Mvc;
using BLL.ModelViews;
using Newtonsoft.Json;

namespace Web.Commands
{
<#+ }


void WriteCNTRLFooter()
{ #>
}
<#+ }


#>
