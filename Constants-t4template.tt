<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

// Constants TT 
// Change Log v1.0
//
//
//
// 03/05/2014 : Created 


// Initialization
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
     
// Please set the options here 

bool overwrite = true;
string inputFile = @"..\\DAL\\Model.edmx";   //** CHANGE SETTINGS  **
var dalNamespace = "DAL";                    //** CHANGE SETTINGS  **   
// string tablePrefix = "c_";                   //** CHANGE SETTINGS  Not used**

// var modelNames = new string[] {"c_master"};   //** CHANGE SETTINGS  for LIST OF TABLES**
var modelNames = new string[] {};                //** CHANGE SETTINGS  for ALL TABLES in DB**
    
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();

// Checking folders
CheckFolder("Tools");


WriteTablesHeader();
  foreach (EntityType entity in ItemCollection.GetItems<EntityType>().Where(u => modelNames.Count() == 0 || modelNames.Contains(u.Name)).OrderBy(e => e.Name))
    {
    string realEntityName = entity.Name;
    int index = 0;
    while(index <= realEntityName.Length){
    int p = realEntityName.IndexOf("_", index);
    if( p!=-1 ){
    realEntityName = realEntityName.Substring(0, p) + realEntityName.Substring(p+1,1).ToUpper() + realEntityName.Substring(p+2);
    index = p++;
    }
        else
        break;
    }
    realEntityName = FixName(realEntityName);

// ------------------------------------------------------------------------
// ------------------------------------------------------------------------
// WriteTablesHeader(realEntityName);
#>
    public const string <#=realEntityName#> = "<#=realEntityName#>";
<# 
    }
WriteClassCloseFooter();
//WriteFile("Tools", "Constants-Tables.cs", overwrite);
#>


<# // -------------------------------------------- #>
    [Serializable]
    public enum ErrorState
    {
        [Description("Critical")]
        Critical = 1,
        [Description("Significant")]
        Significant = 2,
        [Description("Normal")]
        Normal = 3,
        [Description("Gloabl - Application Level")]
        Global = 4,
        [Description("Admin Error")]
        Admin = 5
    }

<# // -------------------------------------------- #>
    [Serializable]
    public enum TrackingState
    {
        [Description("Created")]
        Created = 1,
        [Description("Updated")]
        Updated = 2,
        [Description("Deleted")]
        Deleted = 3,
        [Description("AuthSuccess")]
        AuthSuccess = 4,
        [Description("AuthAttempt")]
        AuthAttempt = 5,
        [Description("WarningMSG")]
        Warning = 6,
    }

<#
WriteFile("Tools", "Constants.cs", overwrite);
#>







<#+
string FixName(string name){
    return name.Substring(0,1).ToUpper() + name.Substring(1);
}

void CheckFolder(string folder){
    string directory = Path.GetDirectoryName(Host.TemplateFile);
    directory = Path.Combine(directory, folder);
    if(!System.IO.Directory.Exists(directory))
        System.IO.Directory.CreateDirectory(directory);
}

void WriteFile(string folder, string file, bool overwrite){
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory,folder, file);

    if(file.ToLower() == "debug.txt" || !File.Exists(outputFilePath) || overwrite)
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}


void WriteTablesHeader()
{ #>
    //for tablenames as in DB for Tracking
    public static class Tables
    {
<#+ }




void WriteClassCloseFooter()
{ #>
    }
<#+ }




#>
