private static void MoveDocumentToAWS(CaseDocument doc, Common.IdGuidPair clientIds)
	    {
		    Common.CaseIds caseIds = BLL.Presenters.CasePresenter.GetCaseIdsbyCaseDocGuid(doc.caseDocGUID);
		    string caseDir = ConfigurationManager.AppSettings["CaseFileDirectory"].ToString() + caseIds.Guid;
		    string pathFile = (caseDir + @"\d\" + doc.caseDocGUID + doc.caseDocExt).Replace("\\", @"\");

		    // Get IO File Info
		    //var savedFileInfo = new FileInfo(pathFile);
		    //string cleanFileName = BLL.Tools.Utilities.MakeFriendlyUrl(doc.caseDocOriginalName);

		    string contentType = MimeMapping.GetMimeMapping(pathFile);
			string awsUploadLocationPath = clientIds.Guid + "/" + caseIds.Guid + "/" + doc.caseDocGUID + doc.caseDocExt;
		    string awsEtag = BLL.Services.UploadMedia.SaveToAWS(awsUploadLocationPath, pathFile, contentType);

			if (awsEtag.IsNullOrEmpty())
				return;

			//Save Details to database
			Upload data = InitializeUploadModel(doc, caseIds.Id, awsEtag);

		    Common.IdGuidPair uploadData = UploadsController.AddFileEntry(data);
		    // --------------------------------------
	    }
      
      
      public static string SaveToAWS(string awspathandfilename, string pathandfilename, string contentType)
	    {
		    try
		    {
			    return Cloud.AmazonWebServices.SaveToAWS(awspathandfilename, pathandfilename, contentType);
			}
		    catch (Exception ex)
		    {
				ErrorHandler.InsertErrorInfo(ex, eErrorState.Critical, "Cloud.AmazonWebServices.SaveToAWS File Not found " + pathandfilename);
		    }
			
			return String.Empty;
	    }
      
      public class Cloud
	{
		public class AmazonWebServices
		{
			public static string BuildAWSPathWithFileName(Guid clientGuid, Guid caseGuid, Guid fileGuid, string fileExt)
			{
				return (clientGuid + "/" + caseGuid + "/" + fileGuid + fileExt);
			}

			public static string SaveToAWS(string awsUploadLocationPath, string fullLocalPathAndGuidName, string fileContentType)
			{
				S3File s3File = new S3File();
				s3File.AWSProfileName = ConfigurationManager.AppSettings["AWSProfileName"];
				s3File.BucketName = ConfigurationManager.AppSettings["AWSS3Bucket"];
				s3File.ContentType = MimeMapping.GetMimeMapping(fileContentType);
				s3File.FilePath = fullLocalPathAndGuidName;
				s3File.Key = awsUploadLocationPath;
				return AWS.AddS3Object(s3File);
			}
		}
	}


 private static void MoveImageToAWS(CaseImage image, Common.IdGuidPair clientIds)
	    {
		    Common.CaseIds caseIds = BLL.Presenters.CasePresenter.GetCaseIdsbyImageGuid(image.caseImgGUID);

		    string caseDir = ConfigurationManager.AppSettings["CaseFileDirectory"].ToString() + caseIds.Guid;

			// string pathFile = string.Format(ConfigurationManager.AppSettings["CaseImagePath"],caseIds.Guid, image.caseImgGUID, "{0}", image.caseImgGUID, image.caseImgExt);

			string pathFile = (caseDir + @"\p\" + image.caseImgGUID +  @"\o\" + image.caseImgGUID + image.caseImgExt).Replace("\\", @"\");

		    // Get IO File Info
		    //var savedFileInfo = new FileInfo(pathFile);
		    //string cleanFileName = BLL.Tools.Utilities.MakeFriendlyUrl(doc.caseDocOriginalName);

		    string contentType = MimeMapping.GetMimeMapping(pathFile);
			string awsUploadLocationPath = clientIds.Guid + "/" + caseIds.Guid + "/" + image.caseImgGUID + image.caseImgExt;
			string awsEtag = BLL.Services.UploadMedia.SaveToAWS(awsUploadLocationPath, pathFile, contentType);

			if (awsEtag.IsNullOrEmpty())
				return;

			//Save Details to database
			Upload data = InitializeImageUploadModel(image, caseIds.Id, awsEtag);

		    Common.IdGuidPair uploadData = UploadsController.AddFileEntry(data);
		    // --------------------------------------
	    }
		private static void MoveDocumentToAWS(CaseDocument doc, Common.IdGuidPair clientIds)
	    {
		    Common.CaseIds caseIds = BLL.Presenters.CasePresenter.GetCaseIdsbyCaseDocGuid(doc.caseDocGUID);
		    string caseDir = ConfigurationManager.AppSettings["CaseFileDirectory"].ToString() + caseIds.Guid;
		    string pathFile = (caseDir + @"\d\" + doc.caseDocGUID + doc.caseDocExt).Replace("\\", @"\");

		    // Get IO File Info
		    //var savedFileInfo = new FileInfo(pathFile);
		    //string cleanFileName = BLL.Tools.Utilities.MakeFriendlyUrl(doc.caseDocOriginalName);

		    string contentType = MimeMapping.GetMimeMapping(pathFile);
			string awsUploadLocationPath = clientIds.Guid + "/" + caseIds.Guid + "/" + doc.caseDocGUID + doc.caseDocExt;
		    string awsEtag = BLL.Services.UploadMedia.SaveToAWS(awsUploadLocationPath, pathFile, contentType);

			if (awsEtag.IsNullOrEmpty())
				return;

			//Save Details to database
			Upload data = InitializeUploadModel(doc, caseIds.Id, awsEtag);

		    Common.IdGuidPair uploadData = UploadsController.AddFileEntry(data);
		    // --------------------------------------
	    }
